{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home GitHub Example Classes Motor TouchSensor ColorSensor Enums Input Output Then","title":"Home"},{"location":"#home","text":"GitHub Example","title":"Home"},{"location":"#classes","text":"Motor TouchSensor ColorSensor","title":"Classes"},{"location":"#enums","text":"Input Output Then","title":"Enums"},{"location":"colorsensor/","text":"ColorSensor class ColorSensor(port) Object that allows interaction with a connected color sensor. Parameters: port ( Input ): The port on the EV3 Brick, where the sensor is connected. Methods ambient() Returns the how much of the light is reflected to the sensor.","title":"ColorSensor"},{"location":"colorsensor/#colorsensor","text":"class ColorSensor(port) Object that allows interaction with a connected color sensor. Parameters: port ( Input ): The port on the EV3 Brick, where the sensor is connected.","title":"ColorSensor"},{"location":"colorsensor/#methods","text":"ambient() Returns the how much of the light is reflected to the sensor.","title":"Methods"},{"location":"example/","text":"Example import time import legoapi ma = legoapi.Motor(legoapi.Output.A) mb = legoapi.Motor(legoapi.Output.B) print(\"1\") ma.run(80) mb.run(80) time.sleep(2) print(\"2\") ma.run(0) mb.brake() time.sleep(2) print(\"3\") ma.run_time(80,1500,legoapi.Then.Brake) mb.run_time(80,1000,legoapi.Then.Brake) time.sleep(3) print(\"4\") ma.run_time(80,1500,legoapi.Then.Coast) mb.run_time(80,1500,legoapi.Then.Brake) time.sleep(3) print(\"5\") ma.run_angle(80,1500,legoapi.Then.Brake) mb.run_angle(80,1000,legoapi.Then.Brake) time.sleep(3) print(\"6\") ma.run_angle(80,1500,legoapi.Then.Coast) mb.run_angle(80,1500,legoapi.Then.Brake) time.sleep(2)","title":"Example"},{"location":"example/#example","text":"import time import legoapi ma = legoapi.Motor(legoapi.Output.A) mb = legoapi.Motor(legoapi.Output.B) print(\"1\") ma.run(80) mb.run(80) time.sleep(2) print(\"2\") ma.run(0) mb.brake() time.sleep(2) print(\"3\") ma.run_time(80,1500,legoapi.Then.Brake) mb.run_time(80,1000,legoapi.Then.Brake) time.sleep(3) print(\"4\") ma.run_time(80,1500,legoapi.Then.Coast) mb.run_time(80,1500,legoapi.Then.Brake) time.sleep(3) print(\"5\") ma.run_angle(80,1500,legoapi.Then.Brake) mb.run_angle(80,1000,legoapi.Then.Brake) time.sleep(3) print(\"6\") ma.run_angle(80,1500,legoapi.Then.Coast) mb.run_angle(80,1500,legoapi.Then.Brake) time.sleep(2)","title":"Example"},{"location":"input/","text":"Input Enum for input ports. Can be: Port1 Port2 Port3 Port4 PortA PortB PortC PortD","title":"Input"},{"location":"input/#input","text":"Enum for input ports. Can be: Port1 Port2 Port3 Port4 PortA PortB PortC PortD","title":"Input"},{"location":"motor/","text":"Motor class Motor(port) Object that allows interaction with a connected motor. Parameters: port ( Output ): The port on the EV3 Brick, where the motor is connected. Methods angle() Returns the degree of the motor. reset_angle() Resets the degree of the motor to 0. stop() Stops the motor without braking. brake() Stops the motor with active braking. run(speed) Starts the motor with a speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. run_time(speed, time, then) Starts the motor for a specific time and speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. time(ms) - Time how long the speed should be maintained. then( Then ) - What should be done after this action. run_angle(speed, angle, then) Starts the motor for a specific rotation-angle and speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. angle(deg) - Angle by which the motor should rotate. then( Then ) - What should be done after this action. run_target(speed, angle, then) Starts the motor for a specific rotation-angle and speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. angle(deg) - Angle to which the motor should rotate. then( Then ) - What should be done after this action.","title":"Motor"},{"location":"motor/#motor","text":"class Motor(port) Object that allows interaction with a connected motor. Parameters: port ( Output ): The port on the EV3 Brick, where the motor is connected.","title":"Motor"},{"location":"motor/#methods","text":"angle() Returns the degree of the motor. reset_angle() Resets the degree of the motor to 0. stop() Stops the motor without braking. brake() Stops the motor with active braking. run(speed) Starts the motor with a speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. run_time(speed, time, then) Starts the motor for a specific time and speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. time(ms) - Time how long the speed should be maintained. then( Then ) - What should be done after this action. run_angle(speed, angle, then) Starts the motor for a specific rotation-angle and speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. angle(deg) - Angle by which the motor should rotate. then( Then ) - What should be done after this action. run_target(speed, angle, then) Starts the motor for a specific rotation-angle and speed. Parameters: speed(percetage) - Speed of motor in percent between -100 and 100. angle(deg) - Angle to which the motor should rotate. then( Then ) - What should be done after this action.","title":"Methods"},{"location":"output/","text":"Output Enum for output ports Can be: A B C D","title":"Output"},{"location":"output/#output","text":"Enum for output ports Can be: A B C D","title":"Output"},{"location":"then/","text":"Then Enum for actions after some other motor action was completed. Can be: Coast - Don't brake actively Brake - Brake actively to standstil Hold - Same as brake. (In the future brakes and holds motor in standstil.)","title":"Then"},{"location":"then/#then","text":"Enum for actions after some other motor action was completed. Can be: Coast - Don't brake actively Brake - Brake actively to standstil Hold - Same as brake. (In the future brakes and holds motor in standstil.)","title":"Then"},{"location":"touchsensor/","text":"TouchSensor class TouchSensor(port) Object that allows interaction with a connected touch sensor. Parameters: port ( Input ): The port on the EV3 Brick, where the sensor is connected. Methods pressed() Returns True if the sensor button is pressed and False otherwise.","title":"TouchSensor"},{"location":"touchsensor/#touchsensor","text":"class TouchSensor(port) Object that allows interaction with a connected touch sensor. Parameters: port ( Input ): The port on the EV3 Brick, where the sensor is connected.","title":"TouchSensor"},{"location":"touchsensor/#methods","text":"pressed() Returns True if the sensor button is pressed and False otherwise.","title":"Methods"}]}